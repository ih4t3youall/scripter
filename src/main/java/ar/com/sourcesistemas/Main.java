package ar.com.sourcesistemas;

import ar.com.sourcesistemas.helpers.FileHelper;
import ar.com.sourcesistemas.services.Terminal;
import ar.com.sourcesistemas.views.ScriptOrAliasView;
import ar.com.sourcesistemas.views.SelectFolderView;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.util.List;


public class Main {

    private FileHelper fileHelper = new FileHelper();
    private boolean isGoodName = true;
    private boolean script;
    public static void main(String [] args) throws InterruptedException {
        new Main();
    }
    public Main() throws InterruptedException {

        ScriptOrAliasView scriptOrAlias = new ScriptOrAliasView();
        Terminal terminal =  new Terminal();
        while(true){
            if(scriptOrAlias.isFinish() != ""){
                script = scriptOrAlias.isFinish().equals("Script");
                break;
            }
            Thread.sleep(300);
        }

        List<String> bashrc = fileHelper.getBashRcFile();

        if (script) {
            String command = ".";
            int i = JOptionPane.showConfirmDialog(null, "new folder?");

            if (i == 0) {
                fileHelper.createFolderPrompt();
            } else {
                System.out.println("no");
            }
            File[] foldersNames = fileHelper.getFoldersNames();

            SelectFolderView selectFolderView = new SelectFolderView(foldersNames);

            while (true) {
                if (selectFolderView.isSelected() != null) {
                    break;
                }
                Thread.sleep(300);
            }
            String folderName = selectFolderView.isSelected();
            String fileName = "";
            while (isGoodName) {
                fileName = JOptionPane.showInputDialog(null, "File name");
                if (fileName.indexOf(" ") == -1) {
                    isGoodName = false;
                }
            }

            System.out.println("script will be created in:");
            System.out.println("folder: " + folderName);
            System.out.println("file: " + fileName);
            try {
                fileHelper.createFolderIfNotExists(folderName);
                fileHelper.createFileIfNotExists(fileName);
            } catch (IOException e) {
                e.printStackTrace();
            }
            String absoluteWritePath = fileHelper.getAbsoluteWritePath(fileName);
            executeInTerminal(absoluteWritePath);


        String filepath = fileHelper.getFilePath();
        addAlias(bashrc, filepath, fileName, command);
        }else {
            String command = JOptionPane.showInputDialog(null, "which command will be?");
            String fileName = JOptionPane.showInputDialog(null, "aliasName?");
            //es alias
            if (command == "")
                System.exit(5);
            addAlias(bashrc,"",fileName,command);
        }
        fileHelper.writeBashrc(bashrc);
        System.out.println("finish");
        System.exit(0);


    }

    public boolean addAlias(List<String> bashrc, String filePath, String fileName, String command){

        int cont = 0;
        boolean find = false;
        for(int i =0 ; i<bashrc.size(); i++){
            if (bashrc.get(i).indexOf("#autogenerated code") == 0){
                find = true;
                break;
            }
            cont++;
        }
        String newAlias = createAlias(command,fileName,filePath);
        if (!find){
           bashrc.add("#autogenerated code");
           bashrc.add(newAlias.toString());
        }else {
            bashrc.add(cont+1, newAlias.toString());
        }

        boolean wasDeleted = fileHelper.removeBashrc();
        if (!wasDeleted)
            System.exit(1);

        bashrc.forEach(System.out::println);
        //fileHelper.writeBashrc(bashrc);
        return true;
    }

    private String createAlias(String command,String fileName,String filePath){
        StringBuilder newAlias = new StringBuilder();
        newAlias.append("alias");
        newAlias.append(" ");
        newAlias.append(fileName);
        newAlias.append("=");
        newAlias.append("\"");
        newAlias.append(command);
        newAlias.append(" ");
        if (filePath != "")
            newAlias.append(filePath);
        newAlias.append("\"");

        return newAlias.toString();
    }




}
